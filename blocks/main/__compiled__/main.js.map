{"version":3,"mappings":"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","names":["toClassName","name","addClasses","element","classes","c","getMetadata","doc","attr","meta","m","toCamelCase","g","BlockService","block","config","row","cols","col","value","as","a","imgs","img","ps","p","main","shortBlockName","blockWrapper","section","SectionService","blockService","container","sectionMeta","key","style","wrappers","defaultContent","e","wrapper","Main","sectionService","components","blocks","component","componentModule","__vitePreload","scriptEl","error","template","theme"],"sources":["../../../src/utils/toClassName.ts","../../../src/utils/addClasses.ts","../../../src/utils/getMetadata.ts","../../../src/utils/toCamelCase.ts","../../../scripts/main.ts"],"sourcesContent":["export function toClassName(name: string) {\n  return typeof name === 'string'\n    ? name\n        .toLowerCase()\n        .replace(/[^0-9a-z]/gi, '-')\n        .replace(/-+/g, '-')\n        .replace(/^-|-$/g, '')\n    : '';\n}\n","import { toClassName } from './toClassName';\n\nexport const addClasses = (element: HTMLElement, classes: string) => {\n  classes.split(',').forEach((c) => {\n    element.classList.add(toClassName(c.trim()));\n  });\n};\n","export function getMetadata(name: string, doc = document) {\n  const attr = name && name.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${name}\"]`)] as HTMLMetaElement[]) || [];\n  const meta = metaTags\n    .map((m) => {\n      return m.content;\n    })\n    .join(', ');\n  return meta.length ? meta : '';\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Sanitizes a string for use as a js property name.\n * @param {string} name The unsanitized string\n * @returns {string} The camelCased name\n */\nexport function toCamelCase(name: string) {\n  return toClassName(name).replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n","// const LCP_BLOCKS: string[] = []; // add your LCP blocks to the list\n\nimport { addClasses } from '../src/utils/addClasses';\nimport { getMetadata } from '../src/utils/getMetadata';\nimport { toCamelCase } from '../src/utils/toCamelCase';\nimport { toClassName } from '../src/utils/toClassName';\n\ntype ComponentMapping = {\n  name: string;\n  element: HTMLDivElement;\n};\n\nclass BlockService {\n  /**\n   * Extracts the config from a block.\n   * @param {Element} block The block element\n   * @returns {object} The block config\n   */\n  readBlockConfig(block: Element): Record<string, any> {\n    const config: Record<any, any> = {};\n    block.querySelectorAll(':scope > div').forEach((row) => {\n      if (row.children) {\n        const cols = [...row.children];\n        if (cols[1]) {\n          const col = cols[1];\n          const name = toClassName(cols[0].textContent ?? '');\n          let value: any = '';\n          if (col.querySelector('a')) {\n            const as = [...col.querySelectorAll('a')];\n            if (as.length === 1) {\n              value = as[0].href;\n            } else {\n              value = as.map((a) => a.href);\n            }\n          } else if (col.querySelector('img')) {\n            const imgs = [...col.querySelectorAll('img')];\n            if (imgs.length === 1) {\n              value = imgs[0].src;\n            } else {\n              value = imgs.map((img) => img.src);\n            }\n          } else if (col.querySelector('p')) {\n            const ps = [...col.querySelectorAll('p')];\n            if (ps.length === 1) {\n              value = ps[0].textContent;\n            } else {\n              value = ps.map((p) => p.textContent);\n            }\n          } else value = row.children[1].textContent;\n          config[name] = value;\n        }\n      }\n    });\n    return config;\n  }\n\n  /**\n   * Decorates all blocks in a container element.\n   * @param {Element} main The container element\n   */\n  decorateBlocks(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach(this.decorateBlock);\n  }\n\n  /**\n   * Decorates a block.\n   * @param {Element} block The block element\n   */\n  private decorateBlock(block: HTMLElement) {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  }\n}\n\nclass SectionService {\n  constructor(private blockService: BlockService) {}\n\n  init(container: HTMLElement) {\n    this.transformSection(container);\n  }\n\n  /**\n   * Decorates all sections in a container element.\n   * @param {Element} main The container element\n   */\n  private transformSection(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>(':scope > div').forEach((section) => {\n      this.adjustMarkup(section);\n      this.processSectionMetaData(section);\n    });\n  }\n\n  private processSectionMetaData(section: HTMLElement) {\n    // Process section metadata\n    const sectionMeta = section.querySelector('div.section-metadata');\n    if (sectionMeta) {\n      const meta = this.blockService.readBlockConfig(sectionMeta);\n      Object.keys(meta).forEach((key) => {\n        if (key === 'style') {\n          const styles = meta.style\n            .split(',')\n            .filter((style: string) => style)\n            .map((style: string) => toClassName(style.trim()));\n          styles.forEach((style: string) => section.classList.add(style));\n        } else {\n          section.dataset[toCamelCase(key)] = meta[key];\n        }\n      });\n      if (sectionMeta.parentElement) sectionMeta.parentElement.remove();\n    }\n  }\n\n  private adjustMarkup(section: HTMLDivElement) {\n    const wrappers: HTMLDivElement[] = [];\n    let defaultContent = false;\n    [...section.children].forEach((e) => {\n      if (e.tagName === 'DIV' || !defaultContent) {\n        const wrapper = document.createElement('div');\n        wrappers.push(wrapper);\n        defaultContent = e.tagName !== 'DIV';\n        if (defaultContent) wrapper.classList.add('default-content-wrapper');\n      }\n      wrappers[wrappers.length - 1].append(e);\n    });\n    wrappers.forEach((wrapper) => section.append(wrapper));\n    section.classList.add('section');\n    section.dataset.sectionStatus = 'initialized';\n    section.style.display = 'none';\n  }\n}\n\nclass Main {\n  constructor(\n    private sectionService: SectionService,\n    private blockService: BlockService\n  ) {}\n\n  init = async () => {\n    this.setup();\n    await this.loadEager();\n  };\n\n  /**\n   * Setup block utils.\n   */\n  private setup() {\n    window.hlx = window.hlx || {};\n    window.hlx.RUM_MASK_URL = 'full';\n    window.hlx.codeBasePath = '';\n    window.hlx.lighthouse = new URLSearchParams(window.location.search).get('lighthouse') === 'on';\n\n    const scriptEl = document.querySelector('script[src$=\"/scripts/scripts.js\"]') as HTMLScriptElement;\n    if (scriptEl) {\n      try {\n        [window.hlx.codeBasePath] = new URL(scriptEl.src).pathname.split('/scripts/scripts.js');\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.log(error);\n      }\n    }\n  }\n\n  private loadEager = async () => {\n    // TODO: how to support different languages here\n    document.documentElement.lang = 'en';\n    this.decorateTemplateAndTheme();\n    const main = document.querySelector('main');\n    if (main) {\n      this.sectionService.init(main);\n      this.blockService.decorateBlocks(main);\n      this.loadComponents();\n      document.body.classList.add('appear');\n      // await this.waitForLCP(LCP_BLOCKS);\n    }\n  };\n\n  // private loadLazy = async () => {};\n\n  private decorateTemplateAndTheme() {\n    const template = getMetadata('template');\n    if (template) addClasses(document.body, template);\n    const theme = getMetadata('theme');\n    if (theme) addClasses(document.body, theme);\n  }\n\n  private loadComponents = async () => {\n    const sections = document.querySelectorAll<HTMLElement>('.section');\n    sections.forEach((section) => {\n      const components: ComponentMapping[] = [];\n      const blocks = section.querySelectorAll<HTMLDivElement>('[data-block-name]');\n      if (!blocks.length) {\n        section.style.removeProperty('display');\n        return;\n      }\n      blocks.forEach((block: HTMLDivElement) => {\n        block.style.display = 'none';\n        components.push({\n          name: block.dataset['blockName'] as string,\n          element: block,\n        });\n      });\n      if (components.length) {\n        components.forEach(async (component) => {\n          const componentModule = await import(\n            `${window.hlx.codeBasePath}/blocks/${component.name}/__compiled__/${component.name}.js`\n          );\n          if (componentModule.default) {\n            await componentModule.default(component.element);\n          }\n        });\n      }\n      section.style.removeProperty('display');\n    });\n  };\n}\n\n(async function () {\n  const blockService = new BlockService();\n  const sectionService = new SectionService(blockService);\n  const main = new Main(sectionService, blockService);\n  await main.init();\n})();\n\n// /**\n//  * Loads JS and CSS for a block.\n//  * @param {Element} block The block element\n//  */\n// async function loadBlock(block) {\n//   const status = block.dataset.blockStatus;\n//   if (status !== 'loading' && status !== 'loaded') {\n//     block.dataset.blockStatus = 'loading';\n//     const { blockName } = block.dataset;\n//     try {\n//       const cssLoaded = loadCSS(`${window.hlx.codeBasePath}/blocks/${blockName}/${blockName}.css`);\n//       const decorationComplete = new Promise((resolve) => {\n//         (async () => {\n//           try {\n//             const mod = await import(`${window.hlx.codeBasePath}/blocks/${blockName}/${blockName}.js`);\n//             if (mod.default) {\n//               await mod.default(block);\n//             }\n//           } catch (error) {\n//             // eslint-disable-next-line no-console\n//             console.log(`failed to load module for ${blockName}`, error);\n//           }\n//           resolve();\n//         })();\n//       });\n//       await Promise.all([cssLoaded, decorationComplete]);\n//     } catch (error) {\n//       // eslint-disable-next-line no-console\n//       console.log(`failed to load block ${blockName}`, error);\n//     }\n//     block.dataset.blockStatus = 'loaded';\n//   }\n//   return block;\n// }\n\ndeclare global {\n  interface Window {\n    hlx: {\n      RUM_MASK_URL: string;\n      codeBasePath: string;\n      lighthouse: boolean;\n    };\n  }\n}\n"],"file":"main/__compiled__/main.js"}