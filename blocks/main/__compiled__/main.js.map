{"version":3,"file":"main.js","sources":["../../../src/utils/toClassName.ts","../../../src/utils/addClasses.ts","../../../src/utils/getMetadata.ts","../../../src/utils/toCamelCase.ts","../../../scripts/main.ts"],"sourcesContent":["export function toClassName(name: string) {\n  return typeof name === 'string'\n    ? name\n        .toLowerCase()\n        .replace(/[^0-9a-z]/gi, '-')\n        .replace(/-+/g, '-')\n        .replace(/^-|-$/g, '')\n    : '';\n}\n","import { toClassName } from './toClassName';\n\nexport const addClasses = (element: HTMLElement, classes: string) => {\n  classes.split(',').forEach((c) => {\n    element.classList.add(toClassName(c.trim()));\n  });\n};\n","export function getMetadata(name: string, doc = document) {\n  const attr = name && name.includes(':') ? 'property' : 'name';\n  const metaTags: HTMLMetaElement[] =\n    ([...doc.head.querySelectorAll(`meta[${attr}=\"${name}\"]`)] as HTMLMetaElement[]) || [];\n  const meta = metaTags\n    .map((m) => {\n      return m.content;\n    })\n    .join(', ');\n  return meta.length ? meta : '';\n}\n","import { toClassName } from './toClassName';\n\n/**\n * Sanitizes a string for use as a js property name.\n * @param {string} name The unsanitized string\n * @returns {string} The camelCased name\n */\nexport function toCamelCase(name: string) {\n  return toClassName(name).replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n","// const LCP_BLOCKS: string[] = []; // add your LCP blocks to the list\n\nimport { addClasses } from '../src/utils/addClasses';\nimport { getMetadata } from '../src/utils/getMetadata';\nimport { toCamelCase } from '../src/utils/toCamelCase';\nimport { toClassName } from '../src/utils/toClassName';\n\nclass Main {\n  constructor() {}\n\n  init = async () => {\n    await this.loadEager();\n  };\n\n  private loadEager = async () => {\n    // TODO: how to support different languages here\n    document.documentElement.lang = 'en';\n    this.decorateTemplateAndTheme();\n    const main = document.querySelector('main');\n    if (main) {\n      this.initSections(main);\n      this.decorateBlocks(main);\n      document.body.classList.add('appear');\n      // await this.waitForLCP(LCP_BLOCKS);\n    }\n  };\n\n  // private loadLazy = async () => {};\n\n  private decorateTemplateAndTheme() {\n    const template = getMetadata('template');\n    if (template) addClasses(document.body, template);\n    const theme = getMetadata('theme');\n    if (theme) addClasses(document.body, theme);\n  }\n\n  /**\n   * Decorates all sections in a container element.\n   * @param {Element} main The container element\n   */\n  private initSections(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>(':scope > div').forEach((section) => {\n      const wrappers: HTMLDivElement[] = [];\n      let defaultContent = false;\n      [...section.children].forEach((e) => {\n        if (e.tagName === 'DIV' || !defaultContent) {\n          const wrapper = document.createElement('div');\n          wrappers.push(wrapper);\n          defaultContent = e.tagName !== 'DIV';\n          if (defaultContent) wrapper.classList.add('default-content-wrapper');\n        }\n        wrappers[wrappers.length - 1].append(e);\n      });\n      wrappers.forEach((wrapper) => section.append(wrapper));\n      section.classList.add('section');\n      section.dataset.sectionStatus = 'initialized';\n      section.style.display = 'none';\n\n      // Process section metadata\n      const sectionMeta = section.querySelector('div.section-metadata');\n      if (sectionMeta) {\n        const meta = this.readBlockConfig(sectionMeta);\n        Object.keys(meta).forEach((key) => {\n          if (key === 'style') {\n            const styles = meta.style\n              .split(',')\n              .filter((style: string) => style)\n              .map((style: string) => toClassName(style.trim()));\n            styles.forEach((style: string) => section.classList.add(style));\n          } else {\n            section.dataset[toCamelCase(key)] = meta[key];\n          }\n        });\n        if (sectionMeta.parentElement) sectionMeta.parentElement.remove();\n      }\n    });\n  }\n\n  /**\n   * Decorates all blocks in a container element.\n   * @param {Element} main The container element\n   */\n  private decorateBlocks(main: HTMLElement) {\n    main.querySelectorAll<HTMLDivElement>('div.section > div > div').forEach(this.decorateBlock);\n  }\n\n  /**\n   * Decorates a block.\n   * @param {Element} block The block element\n   */\n  private decorateBlock(block: HTMLElement) {\n    const shortBlockName = block.classList[0];\n    if (shortBlockName) {\n      block.classList.add('block');\n      block.dataset.blockName = shortBlockName;\n      block.dataset.blockStatus = 'initialized';\n      const blockWrapper = block.parentElement;\n      blockWrapper?.classList.add(`${shortBlockName}-wrapper`);\n      const section = block.closest('.section');\n      if (section) section.classList.add(`${shortBlockName}-container`);\n    }\n  }\n\n  /**\n   * Extracts the config from a block.\n   * @param {Element} block The block element\n   * @returns {object} The block config\n   */\n  private readBlockConfig(block: Element): Record<string, any> {\n    const config = {};\n    block.querySelectorAll(':scope > div').forEach((row) => {\n      if (row.children) {\n        const cols = [...row.children];\n        if (cols[1]) {\n          const col = cols[1];\n          const name = toClassName(cols[0].textContent ?? '');\n          let value: string | string[] = '';\n          if (col.querySelector('a')) {\n            const as = [...col.querySelectorAll('a')];\n            if (as.length === 1) {\n              value = as[0].href;\n            } else {\n              value = as.map((a) => a.href);\n            }\n          } else if (col.querySelector('img')) {\n            const imgs = [...col.querySelectorAll('img')];\n            if (imgs.length === 1) {\n              value = imgs[0].src;\n            } else {\n              value = imgs.map((img) => img.src);\n            }\n          } else if (col.querySelector('p')) {\n            const ps = [...col.querySelectorAll('p')];\n            if (ps.length === 1) {\n              value = ps[0].textContent;\n            } else {\n              value = ps.map((p) => p.textContent);\n            }\n          } else value = row.children[1].textContent;\n          config[name] = value;\n        }\n      }\n    });\n    return config;\n  }\n\n  // private waitForLCP = async (lcpBlocks: string[]) => {\n  //   const block: HTMLElement | null = document.querySelector('.block');\n  //   const hasLCPBlock = block && lcpBlocks.includes(block.dataset.blockName);\n  //   if (hasLCPBlock) await loadBlock(block);\n\n  //   document.body.style.removeProperty('display');\n  // };\n}\n\n(async function () {\n  const main = new Main();\n  await main.init();\n})();\n"],"names":["toClassName","name","addClasses","element","classes","c","getMetadata","doc","attr","meta","m","toCamelCase","g","Main","main","template","theme","section","wrappers","defaultContent","e","wrapper","sectionMeta","key","style","block","shortBlockName","blockWrapper","config","row","cols","col","value","as","a","imgs","img","ps","p"],"mappings":"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"}